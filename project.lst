CCS PCM C Compiler, Version 5.074, 32906               04-เม.ย.-19 13:31

               Filename:   E:\Lab261215\Scripts\Project\embededProject\project.lst

               ROM used:   921 words (11%)
                           Largest free fragment is 2048
               RAM used:   32 (9%) at main() level
                           42 (11%) worst case
               Stack used: 3 locations (2 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   205
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.3
0028:  GOTO   02B
0029:  BTFSC  0B.0
002A:  GOTO   052
002B:  MOVLW  8C
002C:  MOVWF  04
002D:  BTFSS  00.0
002E:  GOTO   031
002F:  BTFSC  0C.0
0030:  GOTO   055
0031:  MOVF   22,W
0032:  MOVWF  04
0033:  MOVF   23,W
0034:  MOVWF  77
0035:  MOVF   24,W
0036:  MOVWF  78
0037:  MOVF   25,W
0038:  MOVWF  79
0039:  MOVF   26,W
003A:  MOVWF  7A
003B:  MOVF   27,W
003C:  BSF    03.6
003D:  MOVWF  0D
003E:  BCF    03.6
003F:  MOVF   28,W
0040:  BSF    03.6
0041:  MOVWF  0F
0042:  BCF    03.6
0043:  MOVF   29,W
0044:  BSF    03.6
0045:  MOVWF  0C
0046:  BCF    03.6
0047:  MOVF   2A,W
0048:  BSF    03.6
0049:  MOVWF  0E
004A:  BCF    03.6
004B:  MOVF   20,W
004C:  MOVWF  0A
004D:  SWAPF  21,W
004E:  MOVWF  03
004F:  SWAPF  7F,F
0050:  SWAPF  7F,W
0051:  RETFIE
0052:  BCF    0A.3
0053:  BCF    0A.4
0054:  GOTO   058
0055:  BCF    0A.3
0056:  BCF    0A.4
0057:  GOTO   07E
.................... #include <16F886.h> 
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
*
00B5:  DATA 73,3A
00B6:  DATA 6F,38
00B7:  DATA A0,3B
00B8:  DATA 6F,39
00B9:  DATA EB,34
00BA:  DATA EE,33
00BB:  DATA 0D,05
00BC:  DATA 00,00
00BD:  DATA 69,3A
00BE:  DATA E5,36
00BF:  DATA 73,1D
00C0:  DATA A0,12
00C1:  DATA 64,10
00C2:  DATA 0D,05
00C3:  DATA 00,00
00C4:  DATA 25,32
00C5:  DATA 20,38
00C6:  DATA E5,37
00C7:  DATA 70,36
00C8:  DATA 65,10
00C9:  DATA EC,32
00CA:  DATA 66,3A
00CB:  DATA A0,06
00CC:  DATA 0A,00
*
010C:  MOVF   0B,W
010D:  MOVWF  3D
010E:  BCF    0B.7
010F:  BSF    03.5
0110:  BSF    03.6
0111:  BSF    0C.7
0112:  BSF    0C.0
0113:  NOP
0114:  NOP
0115:  BCF    03.5
0116:  BCF    03.6
0117:  BTFSC  3D.7
0118:  BSF    0B.7
0119:  BTFSC  03.0
011A:  GOTO   144
011B:  BSF    03.6
011C:  MOVF   0C,W
011D:  ANDLW  7F
011E:  BCF    03.6
011F:  MOVWF  3D
0120:  BSF    03.6
0121:  MOVF   0D,W
0122:  BCF    03.6
0123:  MOVWF  3E
0124:  BSF    03.6
0125:  MOVF   0F,W
0126:  BCF    03.6
0127:  MOVWF  3F
0128:  MOVF   3D,W
0129:  BTFSS  0C.4
012A:  GOTO   129
012B:  MOVWF  19
012C:  MOVF   3E,W
012D:  BSF    03.6
012E:  MOVWF  0D
012F:  BCF    03.6
0130:  MOVF   3F,W
0131:  BSF    03.6
0132:  MOVWF  0F
0133:  BCF    03.6
0134:  MOVF   0B,W
0135:  MOVWF  40
0136:  BCF    0B.7
0137:  BSF    03.5
0138:  BSF    03.6
0139:  BSF    0C.7
013A:  BSF    0C.0
013B:  NOP
013C:  NOP
013D:  BCF    03.5
013E:  BCF    03.6
013F:  BTFSC  40.7
0140:  BSF    0B.7
0141:  DECFSZ 3C,F
0142:  GOTO   144
0143:  GOTO   164
0144:  BSF    03.6
0145:  RLF    0C,W
0146:  RLF    0E,W
0147:  ANDLW  7F
0148:  BCF    03.6
0149:  MOVWF  3D
014A:  BSF    03.6
014B:  MOVF   0D,W
014C:  BCF    03.6
014D:  MOVWF  3E
014E:  BSF    03.6
014F:  MOVF   0F,W
0150:  BCF    03.6
0151:  MOVWF  3F
0152:  MOVF   3D,W
0153:  BTFSS  0C.4
0154:  GOTO   153
0155:  MOVWF  19
0156:  MOVF   3E,W
0157:  BSF    03.6
0158:  MOVWF  0D
0159:  BCF    03.6
015A:  MOVF   3F,W
015B:  BSF    03.6
015C:  MOVWF  0F
015D:  INCF   0D,F
015E:  BTFSC  03.2
015F:  INCF   0F,F
0160:  BCF    03.0
0161:  BCF    03.6
0162:  DECFSZ 3C,F
0163:  GOTO   10C
0164:  RETURN
0165:  MOVF   43,W
0166:  CLRF   78
0167:  SUBWF  42,W
0168:  BTFSC  03.0
0169:  GOTO   16D
016A:  MOVF   42,W
016B:  MOVWF  77
016C:  GOTO   179
016D:  CLRF   77
016E:  MOVLW  08
016F:  MOVWF  44
0170:  RLF    42,F
0171:  RLF    77,F
0172:  MOVF   43,W
0173:  SUBWF  77,W
0174:  BTFSC  03.0
0175:  MOVWF  77
0176:  RLF    78,F
0177:  DECFSZ 44,F
0178:  GOTO   170
0179:  RETURN
017A:  MOVLW  20
017B:  BTFSS  3D.4
017C:  MOVLW  30
017D:  MOVWF  3E
017E:  MOVF   3C,W
017F:  MOVWF  77
0180:  BTFSS  3C.7
0181:  GOTO   18A
0182:  COMF   77,F
0183:  INCF   77,F
0184:  MOVF   77,W
0185:  MOVWF  3C
0186:  MOVLW  2D
0187:  MOVWF  3E
0188:  BSF    3D.7
0189:  BSF    3D.0
018A:  MOVF   3C,W
018B:  MOVWF  42
018C:  MOVLW  64
018D:  MOVWF  43
018E:  CALL   165
018F:  MOVF   77,W
0190:  MOVWF  3C
0191:  MOVLW  30
0192:  ADDWF  78,W
0193:  MOVWF  3F
0194:  MOVF   3C,W
0195:  MOVWF  42
0196:  MOVLW  0A
0197:  MOVWF  43
0198:  CALL   165
0199:  MOVLW  30
019A:  ADDWF  77,W
019B:  MOVWF  41
019C:  MOVLW  30
019D:  ADDWF  78,W
019E:  MOVWF  40
019F:  MOVF   3E,W
01A0:  MOVWF  77
01A1:  MOVLW  30
01A2:  SUBWF  3F,W
01A3:  BTFSC  03.2
01A4:  GOTO   1A9
01A5:  BSF    3D.1
01A6:  BTFSC  3D.7
01A7:  BSF    3D.2
01A8:  GOTO   1BD
01A9:  MOVF   3E,W
01AA:  MOVWF  3F
01AB:  MOVLW  20
01AC:  MOVWF  3E
01AD:  MOVLW  30
01AE:  SUBWF  40,W
01AF:  BTFSC  03.2
01B0:  GOTO   1B5
01B1:  BSF    3D.0
01B2:  BTFSC  3D.7
01B3:  BSF    3D.1
01B4:  GOTO   1BD
01B5:  BTFSS  03.2
01B6:  BSF    3D.0
01B7:  BTFSS  03.2
01B8:  GOTO   1BD
01B9:  MOVF   3F,W
01BA:  MOVWF  40
01BB:  MOVLW  20
01BC:  MOVWF  3F
01BD:  BTFSC  3D.2
01BE:  GOTO   1C4
01BF:  BTFSC  3D.1
01C0:  GOTO   1C8
01C1:  BTFSC  3D.0
01C2:  GOTO   1CC
01C3:  GOTO   1D0
01C4:  MOVF   3E,W
01C5:  BTFSS  0C.4
01C6:  GOTO   1C5
01C7:  MOVWF  19
01C8:  MOVF   3F,W
01C9:  BTFSS  0C.4
01CA:  GOTO   1C9
01CB:  MOVWF  19
01CC:  MOVF   40,W
01CD:  BTFSS  0C.4
01CE:  GOTO   1CD
01CF:  MOVWF  19
01D0:  MOVF   41,W
01D1:  BTFSS  0C.4
01D2:  GOTO   1D1
01D3:  MOVWF  19
01D4:  RETURN
*
02BC:  BCF    03.6
02BD:  MOVF   0B,W
02BE:  MOVWF  3C
02BF:  BCF    0B.7
02C0:  BSF    03.5
02C1:  BSF    03.6
02C2:  BSF    0C.7
02C3:  BSF    0C.0
02C4:  NOP
02C5:  NOP
02C6:  BCF    03.5
02C7:  BCF    03.6
02C8:  BTFSC  3C.7
02C9:  BSF    0B.7
02CA:  BSF    03.6
02CB:  MOVF   0C,W
02CC:  ANDLW  7F
02CD:  BTFSC  03.2
02CE:  GOTO   311
02CF:  BCF    03.6
02D0:  MOVWF  3C
02D1:  BSF    03.6
02D2:  MOVF   0D,W
02D3:  BCF    03.6
02D4:  MOVWF  3D
02D5:  BSF    03.6
02D6:  MOVF   0F,W
02D7:  BCF    03.6
02D8:  MOVWF  3E
02D9:  MOVF   3C,W
02DA:  BTFSS  0C.4
02DB:  GOTO   2DA
02DC:  MOVWF  19
02DD:  MOVF   3D,W
02DE:  BSF    03.6
02DF:  MOVWF  0D
02E0:  BCF    03.6
02E1:  MOVF   3E,W
02E2:  BSF    03.6
02E3:  MOVWF  0F
02E4:  BCF    03.6
02E5:  MOVF   0B,W
02E6:  MOVWF  3F
02E7:  BCF    0B.7
02E8:  BSF    03.5
02E9:  BSF    03.6
02EA:  BSF    0C.7
02EB:  BSF    0C.0
02EC:  NOP
02ED:  NOP
02EE:  BCF    03.5
02EF:  BCF    03.6
02F0:  BTFSC  3F.7
02F1:  BSF    0B.7
02F2:  BSF    03.6
02F3:  RLF    0C,W
02F4:  RLF    0E,W
02F5:  ANDLW  7F
02F6:  BTFSC  03.2
02F7:  GOTO   311
02F8:  BCF    03.6
02F9:  MOVWF  3C
02FA:  BSF    03.6
02FB:  MOVF   0D,W
02FC:  BCF    03.6
02FD:  MOVWF  3D
02FE:  BSF    03.6
02FF:  MOVF   0F,W
0300:  BCF    03.6
0301:  MOVWF  3E
0302:  MOVF   3C,W
0303:  BTFSS  0C.4
0304:  GOTO   303
0305:  MOVWF  19
0306:  MOVF   3D,W
0307:  BSF    03.6
0308:  MOVWF  0D
0309:  BCF    03.6
030A:  MOVF   3E,W
030B:  BSF    03.6
030C:  MOVWF  0F
030D:  INCF   0D,F
030E:  BTFSC  03.2
030F:  INCF   0F,F
0310:  GOTO   2BC
0311:  BCF    03.6
....................  
.................... #list 
....................  
.................... #device ADC=10 *=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOMCLR                   //Master Clear pin not enabled 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES BROWNOUT                 //Brownout reset 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES BORV40                   //Brownout reset at 4.0V 
.................... #FUSES RESERVED                 //Used to set the reserved FUSE bits 
.................... #FUSES INTRC_IO  
....................  
.................... #use delay(clock=8M) 
*
00F8:  MOVLW  3D
00F9:  MOVWF  04
00FA:  BCF    03.7
00FB:  MOVF   00,W
00FC:  BTFSC  03.2
00FD:  GOTO   10B
00FE:  MOVLW  02
00FF:  MOVWF  78
0100:  CLRF   77
0101:  DECFSZ 77,F
0102:  GOTO   101
0103:  DECFSZ 78,F
0104:  GOTO   100
0105:  MOVLW  97
0106:  MOVWF  77
0107:  DECFSZ 77,F
0108:  GOTO   107
0109:  DECFSZ 00,F
010A:  GOTO   0FE
010B:  RETURN
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
.................... #define RUN_BUTTON   PIN_B7 
.................... #define CERVO  PIN_B4 
.................... #define MOTORGO  PIN_B6 
.................... #define MOTORSTOP PIN_B5 
.................... #define ADD_BUTTON PIN_B3 
.................... #define POP_BUTTON PIN_B2 
....................  
.................... const int period = 15; 
.................... const int16 start = 65036; 
....................  
.................... int cervo_work = 0; 
.................... int spining_wheel = 0; 
.................... int level = 1; 
.................... int counter = 0; 
.................... // for cervo control 
.................... int start_working = 0; 
.................... int status = 0; // 1 = counting 2 = kill people 
....................  
....................  
.................... // people number 
.................... int add_people = 0; 
.................... int pop_people = 0; 
....................  
.................... #define Slave_7Sec  0xB0 
.................... #use i2c(MASTER, I2C1, FORCE_HW) // configure the i2c port 
*
00CD:  BCF    14.7
00CE:  BCF    0C.3
00CF:  MOVF   40,W
00D0:  MOVWF  13
00D1:  MOVLW  02
00D2:  BTFSC  14.7
00D3:  GOTO   0DB
00D4:  BTFSS  0C.3
00D5:  GOTO   0D4
00D6:  MOVLW  00
00D7:  BSF    03.5
00D8:  BTFSC  11.6
00D9:  MOVLW  01
00DA:  BCF    03.5
00DB:  MOVWF  78
00DC:  RETURN
.................... void show_on7Sec(int16 number){ 
00DD:  MOVF   3D,W
00DE:  MOVWF  3E
00DF:  MOVF   3C,W
00E0:  MOVWF  3F
....................  
....................    int upper_byte = number >> 8; 
....................    int lower_byte = number & 0xff; 
....................     
....................    i2c_start(); 
00E1:  BSF    03.5
00E2:  BSF    11.0
00E3:  BTFSC  11.0
00E4:  GOTO   0E3
....................    i2c_write(Slave_7Sec); 
00E5:  MOVLW  B0
00E6:  BCF    03.5
00E7:  MOVWF  40
00E8:  CALL   0CD
....................    i2c_write(2);  // set register pointer to location 2 
00E9:  MOVLW  02
00EA:  MOVWF  40
00EB:  CALL   0CD
....................    i2c_write(upper_byte); // send high byte 
00EC:  MOVF   3E,W
00ED:  MOVWF  40
00EE:  CALL   0CD
....................    i2c_write(lower_byte); // send low byte 
00EF:  MOVF   3F,W
00F0:  MOVWF  40
00F1:  CALL   0CD
....................    i2c_stop(); 
00F2:  BSF    03.5
00F3:  BSF    11.2
00F4:  BTFSC  11.2
00F5:  GOTO   0F4
00F6:  BCF    03.5
00F7:  RETURN
.................... } 
....................  
.................... #INT_RB 
.................... void ext_isr() {  
....................    if (!input(RUN_BUTTON)) { 
*
0058:  BSF    03.5
0059:  BSF    06.7
005A:  BCF    03.5
005B:  BTFSC  06.7
005C:  GOTO   066
....................       start_working = 1; 
005D:  MOVLW  01
005E:  MOVWF  2F
....................       spining_wheel = spining_wheel == 1 ? 0 : 1; 
005F:  DECFSZ 2C,W
0060:  GOTO   063
0061:  MOVLW  00
0062:  GOTO   064
0063:  MOVLW  01
0064:  MOVWF  2C
....................       cervo_work = 0; 
0065:  CLRF   2B
....................    } 
....................     
....................    if(!input(ADD_BUTTON) && !start_working){ 
0066:  BSF    03.5
0067:  BSF    06.3
0068:  BCF    03.5
0069:  BTFSC  06.3
006A:  GOTO   070
006B:  MOVF   2F,F
006C:  BTFSS  03.2
006D:  GOTO   070
....................       add_people = 1; 
006E:  MOVLW  01
006F:  MOVWF  31
....................    } 
....................     
.................... if(!input(POP_BUTTON) && !start_working){ 
0070:  BSF    03.5
0071:  BSF    06.2
0072:  BCF    03.5
0073:  BTFSC  06.2
0074:  GOTO   07A
0075:  MOVF   2F,F
0076:  BTFSS  03.2
0077:  GOTO   07A
....................       pop_people = 1; 
0078:  MOVLW  01
0079:  MOVWF  32
....................    } 
.................... } 
....................  
007A:  BCF    0B.0
007B:  BCF    0A.3
007C:  BCF    0A.4
007D:  GOTO   031
.................... #INT_TIMER1 
.................... void timer1_isr() { 
....................    set_timer1(start); // re-set the timer1 counter to maintain a stable period 
007E:  CLRF   0E
007F:  MOVLW  FE
0080:  MOVWF  0F
0081:  MOVLW  0C
0082:  MOVWF  0E
....................    counter++; 
0083:  INCF   2E,F
....................    if(cervo_work){ 
0084:  MOVF   2B,F
0085:  BTFSC  03.2
0086:  GOTO   09B
....................        if (counter == period) { counter = 0;} 
0087:  MOVF   2E,W
0088:  SUBLW  0F
0089:  BTFSC  03.2
008A:  CLRF   2E
....................       if (counter == 0) { output_high(CERVO);}  // beginning of a new period 
008B:  MOVF   2E,F
008C:  BTFSS  03.2
008D:  GOTO   092
008E:  BSF    03.5
008F:  BCF    06.4
0090:  BCF    03.5
0091:  BSF    06.4
....................       if (counter == level) { 
0092:  MOVF   2D,W
0093:  SUBWF  2E,W
0094:  BTFSS  03.2
0095:  GOTO   09A
....................          output_low(CERVO); 
0096:  BSF    03.5
0097:  BCF    06.4
0098:  BCF    03.5
0099:  BCF    06.4
....................       } 
....................    }else if(spining_wheel) { 
009A:  GOTO   0B1
009B:  MOVF   2C,F
009C:  BTFSC  03.2
009D:  GOTO   0B1
....................        if (counter == 25) { counter = 0;} 
009E:  MOVF   2E,W
009F:  SUBLW  19
00A0:  BTFSC  03.2
00A1:  CLRF   2E
....................       if (counter == 0) { output_high(MOTORGO);}  // beginning of a new period 
00A2:  MOVF   2E,F
00A3:  BTFSS  03.2
00A4:  GOTO   0A9
00A5:  BSF    03.5
00A6:  BCF    06.6
00A7:  BCF    03.5
00A8:  BSF    06.6
....................       if (counter == 3) { 
00A9:  MOVF   2E,W
00AA:  SUBLW  03
00AB:  BTFSS  03.2
00AC:  GOTO   0B1
....................          output_low(MOTORGO); 
00AD:  BSF    03.5
00AE:  BCF    06.6
00AF:  BCF    03.5
00B0:  BCF    06.6
....................       } 
....................    } 
....................    
00B1:  BCF    0C.0
00B2:  BCF    0A.3
00B3:  BCF    0A.4
00B4:  GOTO   031
.................... } 
....................  
.................... int find_survivor(int number); 
.................... void count_people(); 
.................... void infared_input(int& man,int& n,int kill_each); 
.................... void wheel_spin_control(); 
.................... void servo_control(); 
.................... void stop_wheel(); 
....................  
.................... void main() { 
*
0205:  MOVF   03,W
0206:  ANDLW  1F
0207:  MOVWF  03
0208:  MOVLW  71
0209:  BSF    03.5
020A:  MOVWF  0F
020B:  CLRF   10
020C:  MOVF   0F,W
020D:  BSF    03.6
020E:  BCF    07.3
020F:  MOVLW  0C
0210:  BCF    03.6
0211:  MOVWF  19
0212:  MOVLW  A2
0213:  MOVWF  18
0214:  MOVLW  90
0215:  BCF    03.5
0216:  MOVWF  18
0217:  CLRF   2B
0218:  CLRF   2C
0219:  MOVLW  01
021A:  MOVWF  2D
021B:  CLRF   2E
021C:  CLRF   2F
021D:  CLRF   30
021E:  CLRF   31
021F:  CLRF   32
0220:  MOVLW  FF
0221:  MOVWF  33
0222:  BSF    33.3
0223:  MOVF   33,W
0224:  BSF    03.5
0225:  MOVWF  07
0226:  BCF    03.5
0227:  BSF    33.4
0228:  MOVF   33,W
0229:  BSF    03.5
022A:  MOVWF  07
022B:  MOVLW  13
022C:  MOVWF  13
022D:  MOVLW  28
022E:  BCF    03.5
022F:  MOVWF  14
0230:  BSF    03.5
0231:  BSF    14.7
0232:  BCF    14.6
0233:  BCF    03.5
0234:  CLRF   35
0235:  CLRF   34
0236:  BSF    03.5
0237:  BSF    03.6
0238:  MOVF   09,W
0239:  ANDLW  C0
023A:  MOVWF  09
023B:  BCF    03.6
023C:  BCF    1F.4
023D:  BCF    1F.5
023E:  MOVLW  00
023F:  BSF    03.6
0240:  MOVWF  08
0241:  BCF    03.5
0242:  CLRF   07
0243:  CLRF   08
0244:  CLRF   09
0245:  BCF    03.7
....................     
....................    //set up infared sensor 
....................     setup_adc_ports(sAN0); // setup PIN A0 as analog input  
0246:  BSF    03.5
0247:  MOVF   09,W
0248:  ANDLW  C0
0249:  MOVWF  09
024A:  BCF    03.6
024B:  BCF    1F.4
024C:  BCF    1F.5
024D:  MOVLW  01
024E:  BSF    03.6
024F:  MOVWF  08
....................     setup_adc( ADC_CLOCK_INTERNAL );  
0250:  BCF    03.5
0251:  BCF    03.6
0252:  BSF    1F.6
0253:  BSF    1F.7
0254:  BSF    03.5
0255:  BSF    1F.7
0256:  BCF    03.5
0257:  BSF    1F.0
....................     set_adc_channel( 0 ); // set the ADC chaneel to read  
0258:  MOVLW  00
0259:  MOVWF  78
025A:  MOVF   1F,W
025B:  ANDLW  C3
025C:  IORWF  78,W
025D:  MOVWF  1F
....................     delay_us(100); // wait for the sensor reading to finish 
025E:  MOVLW  42
025F:  MOVWF  77
0260:  DECFSZ 77,F
0261:  GOTO   260
0262:  NOP
....................      
....................    // use button start button 
....................    enable_interrupts(INT_RB7); 
0263:  BSF    0B.3
0264:  BSF    03.5
0265:  BSF    16.7
....................    enable_interrupts(INT_RB3); 
0266:  BCF    03.5
0267:  BSF    0B.3
0268:  BSF    03.5
0269:  BSF    16.3
....................    enable_interrupts(GLOBAL); 
026A:  MOVLW  C0
026B:  BCF    03.5
026C:  IORWF  0B,F
....................     
....................    //set up timer 
....................    //timer interrupt 
....................    setup_timer_1(T1_INTERNAL | T1_DIV_BY_4); 
026D:  MOVLW  25
026E:  MOVWF  10
....................    set_timer1(start); 
026F:  CLRF   0E
0270:  MOVLW  FE
0271:  MOVWF  0F
0272:  MOVLW  0C
0273:  MOVWF  0E
....................    enable_interrupts(INT_TIMER1); 
0274:  BSF    03.5
0275:  BSF    0C.0
....................     
....................     
....................     
....................    int man = 0; 
....................    int kill_each = 2; 
....................    // how many people are there 
....................    int n = 8; 
0276:  BCF    03.5
0277:  CLRF   36
0278:  MOVLW  02
0279:  MOVWF  37
027A:  MOVLW  08
027B:  MOVWF  38
....................    show_on7Sec(n); 
027C:  CLRF   3D
027D:  MOVF   38,W
027E:  MOVWF  3C
027F:  CALL   0DD
....................     
....................    while (1) { 
....................          //check infared 
....................          if(start_working){ 
0280:  MOVF   2F,F
0281:  BTFSC  03.2
0282:  GOTO   369
....................              
....................             if(read_adc() > 100 && spining_wheel && !cervo_work) 
0283:  BSF    1F.1
0284:  BTFSC  1F.1
0285:  GOTO   284
0286:  MOVF   1E,W
0287:  MOVWF  7A
0288:  BSF    03.5
0289:  MOVF   1E,W
028A:  BCF    03.5
028B:  MOVWF  39
028C:  MOVF   7A,W
028D:  MOVWF  3A
028E:  MOVF   3A,F
028F:  BTFSS  03.2
0290:  GOTO   295
0291:  MOVF   39,W
0292:  SUBLW  64
0293:  BTFSC  03.0
0294:  GOTO   365
0295:  MOVF   2C,F
0296:  BTFSC  03.2
0297:  GOTO   365
0298:  MOVF   2B,F
0299:  BTFSS  03.2
029A:  GOTO   365
....................                infared_input(man, n, kill_each); 
029B:  MOVF   37,W
029C:  MOVWF  39
....................              
....................             // control servo 
....................             if(cervo_work) 
*
0365:  MOVF   2B,F
0366:  BTFSS  03.2
....................                servo_control(); 
0367:  GOTO   1D5
....................  
....................          }else{ 
0368:  GOTO   36D
....................             output_low(MOTORGO); 
0369:  BSF    03.5
036A:  BCF    06.6
036B:  BCF    03.5
036C:  BCF    06.6
....................          } 
....................           
....................          show_on7Sec(read_adc()); 
036D:  BSF    1F.1
036E:  BTFSC  1F.1
036F:  GOTO   36E
0370:  MOVF   1E,W
0371:  MOVWF  7A
0372:  BSF    03.5
0373:  MOVF   1E,W
0374:  BCF    03.5
0375:  MOVWF  39
0376:  MOVF   1E,W
0377:  MOVWF  3A
0378:  MOVWF  3D
0379:  MOVF   39,W
037A:  MOVWF  3C
037B:  CALL   0DD
....................           
....................          if(add_people){ 
037C:  MOVF   31,F
037D:  BTFSC  03.2
037E:  GOTO   38B
....................             n++; 
037F:  INCF   38,F
....................             if(n > 16) n = 16; 
0380:  MOVF   38,W
0381:  SUBLW  10
0382:  BTFSC  03.0
0383:  GOTO   386
0384:  MOVLW  10
0385:  MOVWF  38
....................             show_on7Sec(n); 
0386:  CLRF   3D
0387:  MOVF   38,W
0388:  MOVWF  3C
0389:  CALL   0DD
....................             add_people = 0; 
038A:  CLRF   31
....................          } 
....................           
....................          if(pop_people){ 
038B:  MOVF   32,F
038C:  BTFSC  03.2
038D:  GOTO   397
....................             n--; 
038E:  DECFSZ 38,F
....................             if(n < 1) n = 1; 
038F:  GOTO   392
0390:  MOVLW  01
0391:  MOVWF  38
....................             show_on7Sec(n); 
0392:  CLRF   3D
0393:  MOVF   38,W
0394:  MOVWF  3C
0395:  CALL   0DD
....................             pop_people = 0; 
0396:  CLRF   32
....................          } 
0397:  GOTO   280
....................     } 
.................... } 
....................  
0398:  SLEEP
.................... void infared_input(int& man, int& n, int kill_each){ 
....................  
....................          //stop motor 
....................          stop_wheel(); 
....................          if(n <= 1){ 
*
02B2:  MOVF   38,W
02B3:  SUBLW  01
02B4:  BTFSS  03.0
02B5:  GOTO   312
....................             //stop working 
....................             start_working = 0; 
02B6:  CLRF   2F
....................             printf("stop working\r\n"); 
02B7:  MOVLW  B5
02B8:  BSF    03.6
02B9:  MOVWF  0D
02BA:  MOVLW  00
02BB:  MOVWF  0F
....................          } 
....................          man++; 
*
0312:  INCF   36,F
....................          printf("items: %d \r\n", man); 
0313:  MOVLW  BD
0314:  BSF    03.6
0315:  MOVWF  0D
0316:  MOVLW  00
0317:  MOVWF  0F
0318:  BCF    03.0
0319:  MOVLW  07
031A:  BCF    03.6
031B:  MOVWF  3C
031C:  CALL   10C
031D:  MOVF   36,W
031E:  MOVWF  3C
031F:  MOVLW  18
0320:  MOVWF  3D
0321:  CALL   17A
0322:  MOVLW  20
0323:  BTFSS  0C.4
0324:  GOTO   323
0325:  MOVWF  19
0326:  MOVLW  0D
0327:  BTFSS  0C.4
0328:  GOTO   327
0329:  MOVWF  19
032A:  MOVLW  0A
032B:  BTFSS  0C.4
032C:  GOTO   32B
032D:  MOVWF  19
....................          delay_ms(1000); 
032E:  MOVLW  04
032F:  MOVWF  3A
0330:  MOVLW  FA
0331:  MOVWF  3D
0332:  CALL   0F8
0333:  DECFSZ 3A,F
0334:  GOTO   330
....................           
....................          if(man < kill_each){ 
0335:  MOVF   39,W
0336:  SUBWF  36,W
0337:  BTFSC  03.0
0338:  GOTO   34A
....................             // continue spinning 
....................            wheel_spin_control(); 
....................              // delay a bit 
....................             delay_ms(1000); 
*
0341:  MOVLW  04
0342:  BCF    03.5
0343:  MOVWF  3A
0344:  MOVLW  FA
0345:  MOVWF  3D
0346:  CALL   0F8
0347:  DECFSZ 3A,F
0348:  GOTO   344
....................          }else{ 
0349:  GOTO   365
....................             //reset man 
....................             man = 0; 
034A:  CLRF   36
....................             //work cervo 
....................             cervo_work = 1; 
034B:  MOVLW  01
034C:  MOVWF  2B
....................             // decreae people 
....................             n--; 
034D:  DECF   38,F
....................             show_on7Sec(n); 
034E:  CLRF   3D
034F:  MOVF   38,W
0350:  MOVWF  3C
0351:  CALL   0DD
....................             printf("%d people left \r\n", n); 
0352:  MOVF   38,W
0353:  MOVWF  3C
0354:  MOVLW  18
0355:  MOVWF  3D
0356:  CALL   17A
0357:  MOVLW  C5
0358:  BSF    03.6
0359:  MOVWF  0D
035A:  MOVLW  00
035B:  MOVWF  0F
035C:  BCF    03.0
035D:  MOVLW  0F
035E:  BCF    03.6
035F:  MOVWF  3C
0360:  CALL   10C
....................             if(n <= 1){ 
0361:  MOVF   38,W
0362:  SUBLW  01
0363:  BTFSC  03.0
....................                //stop 
....................                start_working = 0; 
0364:  CLRF   2F
....................             } 
....................          } 
.................... } 
....................  
.................... void wheel_spin_control(){ 
....................     spining_wheel = 1; 
*
0339:  MOVLW  01
033A:  MOVWF  2C
....................     output_high(MOTORGO); 
033B:  BSF    03.5
033C:  BCF    06.6
033D:  BCF    03.5
033E:  BSF    06.6
....................     enable_interrupts(INT_TIMER1); 
033F:  BSF    03.5
0340:  BSF    0C.0
.................... } 
....................  
.................... void stop_wheel(){ 
....................    disable_interrupts(INT_TIMER1); 
*
029D:  BSF    03.5
029E:  BCF    0C.0
....................    output_low(MOTORGO); 
029F:  BCF    06.6
02A0:  BCF    03.5
02A1:  BCF    06.6
....................    output_high(MOTORSTOP); 
02A2:  BSF    03.5
02A3:  BCF    06.5
02A4:  BCF    03.5
02A5:  BSF    06.5
....................    spining_wheel = 0; 
02A6:  CLRF   2C
....................    delay_ms(500); 
02A7:  MOVLW  02
02A8:  MOVWF  3C
02A9:  MOVLW  FA
02AA:  MOVWF  3D
02AB:  CALL   0F8
02AC:  DECFSZ 3C,F
02AD:  GOTO   2A9
....................    output_low(MOTORSTOP); 
02AE:  BSF    03.5
02AF:  BCF    06.5
02B0:  BCF    03.5
02B1:  BCF    06.5
.................... } 
....................  
.................... void servo_control(){ 
....................  
....................       set_timer1(start); 
*
01D5:  CLRF   0E
01D6:  MOVLW  FE
01D7:  MOVWF  0F
01D8:  MOVLW  0C
01D9:  MOVWF  0E
....................       enable_interrupts(INT_TIMER1); 
01DA:  BSF    03.5
01DB:  BSF    0C.0
....................       level = 1; 
01DC:  MOVLW  01
01DD:  BCF    03.5
01DE:  MOVWF  2D
....................       delay_ms(2000); 
01DF:  MOVLW  08
01E0:  MOVWF  39
01E1:  MOVLW  FA
01E2:  MOVWF  3D
01E3:  CALL   0F8
01E4:  DECFSZ 39,F
01E5:  GOTO   1E1
....................       level = 2; 
01E6:  MOVLW  02
01E7:  MOVWF  2D
....................       delay_ms(2000); 
01E8:  MOVLW  08
01E9:  MOVWF  39
01EA:  MOVLW  FA
01EB:  MOVWF  3D
01EC:  CALL   0F8
01ED:  DECFSZ 39,F
01EE:  GOTO   1EA
....................       level = 1; 
01EF:  MOVLW  01
01F0:  MOVWF  2D
....................       delay_ms(2000); 
01F1:  MOVLW  08
01F2:  MOVWF  39
01F3:  MOVLW  FA
01F4:  MOVWF  3D
01F5:  CALL   0F8
01F6:  DECFSZ 39,F
01F7:  GOTO   1F3
....................       spining_wheel = 1; 
01F8:  MOVLW  01
01F9:  MOVWF  2C
....................       cervo_work = 0; 
01FA:  CLRF   2B
....................       output_high(MOTORGO); 
01FB:  BSF    03.5
01FC:  BCF    06.6
01FD:  BCF    03.5
01FE:  BSF    06.6
....................       enable_interrupts(INT_TIMER1); 
01FF:  BSF    03.5
0200:  BSF    0C.0
0201:  BCF    03.5
0202:  BCF    0A.3
0203:  BCF    0A.4
0204:  GOTO   368 (RETURN)
.................... } 
....................  
.................... void count_people(){ 
....................     
.................... } 
....................  
.................... int find_survivor(int number){ 
....................     
....................    while(number>>1 > 0){ 
....................       number >>= 1; 
....................    } 
....................     
....................    return number * 2 + 1; 
....................  
.................... } 

Configuration Fuses:
   Word  1: 2FC4   INTRC_IO NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
