CCS PCM C Compiler, Version 5.074, 32906               18-เม.ย.-19 13:08

               Filename:   E:\Lab261215\Scripts\Project\embededProject\project.lst

               ROM used:   694 words (8%)
                           Largest free fragment is 2048
               RAM used:   42 (11%) at main() level
                           55 (15%) worst case
               Stack used: 3 locations (2 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   108
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.3
0018:  GOTO   01B
0019:  BTFSC  0B.0
001A:  GOTO   032
001B:  MOVLW  8C
001C:  MOVWF  04
001D:  BTFSS  00.0
001E:  GOTO   021
001F:  BTFSC  0C.0
0020:  GOTO   035
0021:  MOVF   22,W
0022:  MOVWF  04
0023:  MOVF   23,W
0024:  MOVWF  77
0025:  MOVF   24,W
0026:  MOVWF  78
0027:  MOVF   25,W
0028:  MOVWF  79
0029:  MOVF   26,W
002A:  MOVWF  7A
002B:  MOVF   20,W
002C:  MOVWF  0A
002D:  SWAPF  21,W
002E:  MOVWF  03
002F:  SWAPF  7F,F
0030:  SWAPF  7F,W
0031:  RETFIE
0032:  BCF    0A.3
0033:  BCF    0A.4
0034:  GOTO   06F
0035:  BCF    0A.3
0036:  BCF    0A.4
0037:  GOTO   038
.................... #include <16F886.h> 
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
....................  
.................... #list 
....................  
.................... #device ADC=10 *=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOMCLR                   //Master Clear pin not enabled 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES BROWNOUT                 //Brownout reset 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES BORV40                   //Brownout reset at 4.0V 
.................... #FUSES RESERVED                 //Used to set the reserved FUSE bits 
.................... //!#FUSES INTRC_IO  
....................  
.................... #use delay(clock=8M) 
*
0084:  MOVLW  4C
0085:  MOVWF  04
0086:  BCF    03.7
0087:  MOVF   00,W
0088:  BTFSC  03.2
0089:  GOTO   097
008A:  MOVLW  02
008B:  MOVWF  78
008C:  CLRF   77
008D:  DECFSZ 77,F
008E:  GOTO   08D
008F:  DECFSZ 78,F
0090:  GOTO   08C
0091:  MOVLW  97
0092:  MOVWF  77
0093:  DECFSZ 77,F
0094:  GOTO   093
0095:  DECFSZ 00,F
0096:  GOTO   08A
0097:  RETURN
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
.................... #define RUN_BUTTON   PIN_B7 
.................... #define CERVO  PIN_B4 
.................... #define MOTORGO  PIN_B6 
.................... #define MOTORSTOP PIN_B5 
.................... #define ADD_BUTTON PIN_B3 
.................... #define POP_BUTTON PIN_B2 
....................  
.................... #define Slave_7Sec  0xB0 
.................... #use i2c(MASTER, I2C1, FORCE_HW) // configure the i2c port 
0098:  BCF    14.7
0099:  BCF    0C.3
009A:  MOVF   51,W
009B:  MOVWF  13
009C:  MOVLW  02
009D:  BTFSC  14.7
009E:  GOTO   0A6
009F:  BTFSS  0C.3
00A0:  GOTO   09F
00A1:  MOVLW  00
00A2:  BSF    03.5
00A3:  BTFSC  11.6
00A4:  MOVLW  01
00A5:  BCF    03.5
00A6:  MOVWF  78
00A7:  RETURN
.................... void show_on7Sec(int16 number){ 
00A8:  MOVF   4E,W
00A9:  MOVWF  4F
00AA:  MOVF   4D,W
00AB:  MOVWF  50
....................  
....................    int upper_byte = number >> 8; 
....................    int lower_byte = number & 0xff; 
....................     
....................    i2c_start(); 
00AC:  BSF    03.5
00AD:  BSF    11.0
00AE:  BTFSC  11.0
00AF:  GOTO   0AE
....................    i2c_write(Slave_7Sec); 
00B0:  MOVLW  B0
00B1:  BCF    03.5
00B2:  MOVWF  51
00B3:  CALL   098
....................    i2c_write(2);  // set register pointer to location 2 
00B4:  MOVLW  02
00B5:  MOVWF  51
00B6:  CALL   098
....................    i2c_write(upper_byte); // send high byte 
00B7:  MOVF   4F,W
00B8:  MOVWF  51
00B9:  CALL   098
....................    i2c_write(lower_byte); // send low byte 
00BA:  MOVF   50,W
00BB:  MOVWF  51
00BC:  CALL   098
....................    i2c_stop(); 
00BD:  BSF    03.5
00BE:  BSF    11.2
00BF:  BTFSC  11.2
00C0:  GOTO   0BF
00C1:  BCF    03.5
00C2:  RETURN
.................... } 
....................  
....................  
.................... const int period = 150; 
.................... const int16 start = 65486; 
....................  
.................... int cervo_work = 0; 
.................... int spining_wheel = 0; 
.................... int level = 17; 
.................... int counter = 0; 
.................... int sensor_value = 0; 
.................... int start_working = 0; 
.................... int start_count = 0; 
.................... int n = 0; 
.................... int motor_level = 30; 
....................  
....................  
.................... #INT_TIMER1 
.................... void timer1_isr() { 
....................    set_timer1(start);  
*
0038:  CLRF   0E
0039:  MOVLW  FF
003A:  MOVWF  0F
003B:  MOVLW  CE
003C:  MOVWF  0E
....................    counter++; 
003D:  INCF   2B,F
....................    if(cervo_work){ 
003E:  MOVF   28,F
003F:  BTFSC  03.2
0040:  GOTO   055
....................        if (counter == period) { counter = 0;} 
0041:  MOVF   2B,W
0042:  SUBLW  96
0043:  BTFSC  03.2
0044:  CLRF   2B
....................       if (counter == 0) { output_high(CERVO);}  
0045:  MOVF   2B,F
0046:  BTFSS  03.2
0047:  GOTO   04C
0048:  BSF    03.5
0049:  BCF    06.4
004A:  BCF    03.5
004B:  BSF    06.4
....................       if (counter == level) { 
004C:  MOVF   2A,W
004D:  SUBWF  2B,W
004E:  BTFSS  03.2
004F:  GOTO   054
....................          output_low(CERVO); 
0050:  BSF    03.5
0051:  BCF    06.4
0052:  BCF    03.5
0053:  BCF    06.4
....................       } 
....................    }else if(spining_wheel) { 
0054:  GOTO   06B
0055:  MOVF   29,F
0056:  BTFSC  03.2
0057:  GOTO   06B
....................        
....................        if (counter == 250) {counter = 0;} 
0058:  MOVF   2B,W
0059:  SUBLW  FA
005A:  BTFSC  03.2
005B:  CLRF   2B
....................       if (counter == 0) { output_high(MOTORGO);}  
005C:  MOVF   2B,F
005D:  BTFSS  03.2
005E:  GOTO   063
005F:  BSF    03.5
0060:  BCF    06.6
0061:  BCF    03.5
0062:  BSF    06.6
....................       if (counter == motor_level) { 
0063:  MOVF   30,W
0064:  SUBWF  2B,W
0065:  BTFSS  03.2
0066:  GOTO   06B
....................          output_low(MOTORGO); 
0067:  BSF    03.5
0068:  BCF    06.6
0069:  BCF    03.5
006A:  BCF    06.6
....................       } 
....................    } 
....................     
.................... } 
....................  
....................  
006B:  BCF    0C.0
006C:  BCF    0A.3
006D:  BCF    0A.4
006E:  GOTO   021
.................... #INT_RB 
.................... void ext_isr() {  
....................    if (!input(RUN_BUTTON)) { 
006F:  BSF    03.5
0070:  BSF    06.7
0071:  BCF    03.5
0072:  BTFSC  06.7
0073:  GOTO   080
....................       //start_count = 1; 
....................       if(n > 1){ 
0074:  MOVF   2F,W
0075:  SUBLW  01
0076:  BTFSC  03.0
0077:  GOTO   07B
....................          start_count = 2; 
0078:  MOVLW  02
0079:  MOVWF  2E
....................       }else{ 
007A:  GOTO   07D
....................          start_count = 1; 
007B:  MOVLW  01
007C:  MOVWF  2E
....................       } 
....................       //start_working = 0; 
....................       spining_wheel = 1; 
007D:  MOVLW  01
007E:  MOVWF  29
....................       cervo_work = 0; 
007F:  CLRF   28
....................    } 
0080:  BCF    0B.0
0081:  BCF    0A.3
0082:  BCF    0A.4
0083:  GOTO   021
.................... } 
....................  
....................  
.................... int find_survivor(int number); 
.................... int infared_input(int& man,int& n,int kill_each,int& point_at, int* people,int16 predict_survivor); 
.................... void servo_control(); 
.................... void stop_wheel(); 
.................... void start_wheel(); 
....................  
.................... void restore(int* people){ 
....................    int i; 
....................    for(i = 0; i<n; i++){ 
*
00E9:  CLRF   45
00EA:  MOVF   2F,W
00EB:  SUBWF  45,W
00EC:  BTFSC  03.0
00ED:  GOTO   0F8
....................       people[i] = 1; 
00EE:  MOVF   45,W
00EF:  ADDWF  43,W
00F0:  MOVWF  04
00F1:  BCF    03.7
00F2:  BTFSC  44.0
00F3:  BSF    03.7
00F4:  MOVLW  01
00F5:  MOVWF  00
00F6:  INCF   45,F
00F7:  GOTO   0EA
....................    } 
....................    for(i=n; i<12; i++){ 
00F8:  MOVF   2F,W
00F9:  MOVWF  45
00FA:  MOVF   45,W
00FB:  SUBLW  0B
00FC:  BTFSS  03.0
00FD:  GOTO   107
....................       people[i] = 0; 
00FE:  MOVF   45,W
00FF:  ADDWF  43,W
0100:  MOVWF  04
0101:  BCF    03.7
0102:  BTFSC  44.0
0103:  BSF    03.7
0104:  CLRF   00
0105:  INCF   45,F
0106:  GOTO   0FA
....................    } 
0107:  RETURN
.................... } 
....................  
.................... void main() { 
0108:  MOVF   03,W
0109:  ANDLW  1F
010A:  MOVWF  03
010B:  BSF    03.5
010C:  BSF    03.6
010D:  BCF    07.3
010E:  MOVLW  0C
010F:  BCF    03.6
0110:  MOVWF  19
0111:  MOVLW  A2
0112:  MOVWF  18
0113:  MOVLW  90
0114:  BCF    03.5
0115:  MOVWF  18
0116:  MOVLW  FF
0117:  MOVWF  27
0118:  BSF    27.3
0119:  MOVF   27,W
011A:  BSF    03.5
011B:  MOVWF  07
011C:  BCF    03.5
011D:  BSF    27.4
011E:  MOVF   27,W
011F:  BSF    03.5
0120:  MOVWF  07
0121:  MOVLW  13
0122:  MOVWF  13
0123:  MOVLW  28
0124:  BCF    03.5
0125:  MOVWF  14
0126:  BSF    03.5
0127:  BSF    14.7
0128:  BCF    14.6
0129:  BCF    03.5
012A:  CLRF   28
012B:  CLRF   29
012C:  MOVLW  11
012D:  MOVWF  2A
012E:  CLRF   2B
012F:  CLRF   2C
0130:  CLRF   2D
0131:  CLRF   2E
0132:  CLRF   2F
0133:  MOVLW  1E
0134:  MOVWF  30
0135:  BSF    03.5
0136:  BSF    03.6
0137:  MOVF   09,W
0138:  ANDLW  C0
0139:  MOVWF  09
013A:  BCF    03.6
013B:  BCF    1F.4
013C:  BCF    1F.5
013D:  MOVLW  00
013E:  BSF    03.6
013F:  MOVWF  08
0140:  BCF    03.5
0141:  CLRF   07
0142:  CLRF   08
0143:  CLRF   09
0144:  BCF    03.7
....................     
....................    //set up infared sensor 
....................     setup_adc_ports(sAN0); // setup PIN A0 as analog input  
0145:  BSF    03.5
0146:  MOVF   09,W
0147:  ANDLW  C0
0148:  MOVWF  09
0149:  BCF    03.6
014A:  BCF    1F.4
014B:  BCF    1F.5
014C:  MOVLW  01
014D:  BSF    03.6
014E:  MOVWF  08
....................     setup_adc( ADC_CLOCK_INTERNAL );  
014F:  BCF    03.5
0150:  BCF    03.6
0151:  BSF    1F.6
0152:  BSF    1F.7
0153:  BSF    03.5
0154:  BSF    1F.7
0155:  BCF    03.5
0156:  BSF    1F.0
....................     set_adc_channel( 0 ); // set the ADC chaneel to read  
0157:  MOVLW  00
0158:  MOVWF  78
0159:  MOVF   1F,W
015A:  ANDLW  C3
015B:  IORWF  78,W
015C:  MOVWF  1F
....................     delay_us(100); // wait for the sensor reading to finish 
015D:  MOVLW  42
015E:  MOVWF  77
015F:  DECFSZ 77,F
0160:  GOTO   15F
0161:  NOP
....................      
....................    // use button start button 
....................    enable_interrupts(INT_RB7); 
0162:  BSF    0B.3
0163:  BSF    03.5
0164:  BSF    16.7
....................    enable_interrupts(GLOBAL); 
0165:  MOVLW  C0
0166:  BCF    03.5
0167:  IORWF  0B,F
....................     
....................    //set up timer 
....................    //timer interrupt 
....................    setup_timer_1(T1_INTERNAL | T1_DIV_BY_4); 
0168:  MOVLW  25
0169:  MOVWF  10
....................    set_timer1(start); 
016A:  CLRF   0E
016B:  MOVLW  FF
016C:  MOVWF  0F
016D:  MOVLW  CE
016E:  MOVWF  0E
....................  
....................    cervo_work = 1; 
016F:  MOVLW  01
0170:  MOVWF  28
....................    level = 9; 
0171:  MOVLW  09
0172:  MOVWF  2A
....................    enable_interrupts(INT_TIMER1); 
0173:  BSF    03.5
0174:  BSF    0C.0
....................    delay_ms(1000); 
0175:  MOVLW  04
0176:  BCF    03.5
0177:  MOVWF  43
0178:  MOVLW  FA
0179:  MOVWF  4C
017A:  CALL   084
017B:  DECFSZ 43,F
017C:  GOTO   178
....................    cervo_work = 0; 
017D:  CLRF   28
....................    disable_interrupts(INT_TIMER1); 
017E:  BSF    03.5
017F:  BCF    0C.0
....................    counter = 0; 
0180:  BCF    03.5
0181:  CLRF   2B
....................     
....................    int man = 0; 
....................    int kill_each = 2; 
0182:  CLRF   31
0183:  MOVLW  02
0184:  MOVWF  32
....................    // how many people are there 
....................   
....................     
....................    enable_interrupts(INT_TIMER1); 
0185:  BSF    03.5
0186:  BSF    0C.0
....................    
....................    int16 predict_survivor = 0; 
....................    int people_survive[12] = {0,0,0,0,0,0,0,0,0,0,0,0}; 
*
018A:  CLRF   35
018B:  CLRF   36
018C:  CLRF   37
018D:  CLRF   38
018E:  CLRF   39
018F:  CLRF   3A
0190:  CLRF   3B
0191:  CLRF   3C
0192:  CLRF   3D
0193:  CLRF   3E
0194:  CLRF   3F
0195:  CLRF   40
....................     
....................    int point_at = -1; 
....................    int end = 0; 
*
0187:  BCF    03.5
0188:  CLRF   34
0189:  CLRF   33
*
0196:  MOVLW  FF
0197:  MOVWF  41
0198:  CLRF   42
....................    start_count = 0; 
0199:  CLRF   2E
....................    n=0; 
019A:  CLRF   2F
....................    show_on7Sec(n); 
019B:  CLRF   4E
019C:  MOVF   2F,W
019D:  MOVWF  4D
019E:  CALL   0A8
....................    show_on7sec(sensor_value); 
019F:  CLRF   4E
01A0:  MOVF   2C,W
01A1:  MOVWF  4D
01A2:  CALL   0A8
....................     
....................    start_working = 0; 
01A3:  CLRF   2D
....................    sensor_value = read_adc(); 
01A4:  BSF    1F.1
01A5:  BTFSC  1F.1
01A6:  GOTO   1A5
01A7:  BSF    03.5
01A8:  MOVF   1E,W
01A9:  BCF    03.5
01AA:  MOVWF  2C
....................     
....................     
....................    while (!end) { 
01AB:  MOVF   42,F
01AC:  BTFSS  03.2
01AD:  GOTO   2B5
....................          //check infared 
....................          //show_on7sec(read_adc()); 
....................          if(start_working || start_count>0){ 
01AE:  MOVF   2D,F
01AF:  BTFSS  03.2
01B0:  GOTO   1B4
01B1:  MOVF   2E,F
01B2:  BTFSC  03.2
01B3:  GOTO   289
....................           
....................                if(read_adc() >= sensor_value+13 && spining_wheel && !cervo_work){ 
01B4:  BSF    1F.1
01B5:  BTFSC  1F.1
01B6:  GOTO   1B5
01B7:  MOVF   1E,W
01B8:  MOVWF  7A
01B9:  BSF    03.5
01BA:  MOVF   1E,W
01BB:  BCF    03.5
01BC:  MOVWF  43
01BD:  MOVF   7A,W
01BE:  MOVWF  44
01BF:  MOVLW  0D
01C0:  ADDWF  2C,W
01C1:  MOVF   44,F
01C2:  BTFSS  03.2
01C3:  GOTO   1C7
01C4:  SUBWF  43,W
01C5:  BTFSS  03.0
01C6:  GOTO   288
01C7:  MOVF   29,F
01C8:  BTFSC  03.2
01C9:  GOTO   288
01CA:  MOVF   28,F
01CB:  BTFSS  03.2
01CC:  GOTO   288
....................                   stop_wheel(); 
01CD:  CALL   0C3
....................                   delay_ms(150); 
01CE:  MOVLW  96
01CF:  MOVWF  4C
01D0:  CALL   084
....................                   if(read_adc() >= sensor_value+18){ 
01D1:  BSF    1F.1
01D2:  BTFSC  1F.1
01D3:  GOTO   1D2
01D4:  MOVF   1E,W
01D5:  MOVWF  7A
01D6:  BSF    03.5
01D7:  MOVF   1E,W
01D8:  BCF    03.5
01D9:  MOVWF  43
01DA:  MOVF   7A,W
01DB:  MOVWF  44
01DC:  MOVLW  12
01DD:  ADDWF  2C,W
01DE:  MOVF   44,F
01DF:  BTFSS  03.2
01E0:  GOTO   1E4
01E1:  SUBWF  43,W
01E2:  BTFSS  03.0
01E3:  GOTO   287
....................                    
....................                      if(start_count==1){ 
01E4:  DECFSZ 2E,W
01E5:  GOTO   1FA
....................                         n++; 
01E6:  INCF   2F,F
....................                         show_on7sec(n); 
01E7:  CLRF   4E
01E8:  MOVF   2F,W
01E9:  MOVWF  4D
01EA:  CALL   0A8
.................... //!                        if(read_adc() <= sensor_value+315){ 
....................                            start_wheel();  
01EB:  CALL   0D9
....................                            delay_ms(450); 
01EC:  MOVLW  02
01ED:  MOVWF  43
01EE:  MOVLW  E1
01EF:  MOVWF  4C
01F0:  CALL   084
01F1:  DECFSZ 43,F
01F2:  GOTO   1EE
.................... //!                        }else{ 
.................... //!                           start_count = 2; 
.................... //!                        } 
....................                         if(n==12){ 
01F3:  MOVF   2F,W
01F4:  SUBLW  0C
01F5:  BTFSS  03.2
01F6:  GOTO   1F9
....................                            start_count = 2; 
01F7:  MOVLW  02
01F8:  MOVWF  2E
....................                         } 
....................                      }else if(start_count == 2){ 
01F9:  GOTO   20C
01FA:  MOVF   2E,W
01FB:  SUBLW  02
01FC:  BTFSS  03.2
01FD:  GOTO   20C
....................                         start_count = 0; 
01FE:  CLRF   2E
....................                         restore(people_survive); 
01FF:  CLRF   44
0200:  MOVLW  35
0201:  MOVWF  43
0202:  CALL   0E9
....................                         predict_survivor = 0; 
0203:  CLRF   34
0204:  CLRF   33
....................                         show_on7sec(0+predict_survivor); 
0205:  MOVF   34,W
0206:  MOVWF  4E
0207:  MOVF   33,W
0208:  MOVWF  4D
0209:  CALL   0A8
....................                         start_working=1; 
020A:  MOVLW  01
020B:  MOVWF  2D
....................                      } 
....................                       
....................                      if(start_working){  
020C:  MOVF   2D,F
020D:  BTFSC  03.2
020E:  GOTO   286
....................                         end = infared_input(man, n, kill_each, point_at, people_survive,predict_survivor); 
020F:  MOVF   32,W
0210:  MOVWF  43
0211:  CLRF   45
0212:  MOVLW  35
0213:  MOVWF  44
0214:  MOVF   34,W
0215:  MOVWF  47
0216:  MOVF   33,W
0217:  MOVWF  46
*
0284:  MOVF   78,W
0285:  MOVWF  42
....................                      } 
....................                       
....................                   }else{ 
0286:  GOTO   288
....................                       start_wheel();      
0287:  CALL   0D9
....................                    } 
....................                } 
....................             
....................          }else{ 
0288:  GOTO   29C
....................             show_on7sec(read_adc()); 
0289:  BSF    1F.1
028A:  BTFSC  1F.1
028B:  GOTO   28A
028C:  MOVF   1E,W
028D:  MOVWF  7A
028E:  BSF    03.5
028F:  MOVF   1E,W
0290:  BCF    03.5
0291:  MOVWF  43
0292:  MOVF   1E,W
0293:  MOVWF  44
0294:  MOVWF  4E
0295:  MOVF   43,W
0296:  MOVWF  4D
0297:  CALL   0A8
....................             output_low(MOTORGO); 
0298:  BSF    03.5
0299:  BCF    06.6
029A:  BCF    03.5
029B:  BCF    06.6
....................          } 
....................           
....................          if(end){ 
029C:  MOVF   42,F
029D:  BTFSC  03.2
029E:  GOTO   2B4
....................             // stop working 
....................             sleep(); 
029F:  SLEEP
....................             delay_ms(1000); 
02A0:  MOVLW  04
02A1:  MOVWF  43
02A2:  MOVLW  FA
02A3:  MOVWF  4C
02A4:  CALL   084
02A5:  DECFSZ 43,F
02A6:  GOTO   2A2
....................             end = 0; 
02A7:  CLRF   42
....................             n = 12; 
02A8:  MOVLW  0C
02A9:  MOVWF  2F
....................             restore(people_survive); 
02AA:  CLRF   44
02AB:  MOVLW  35
02AC:  MOVWF  43
02AD:  CALL   0E9
....................             point_at = -1; 
02AE:  MOVLW  FF
02AF:  MOVWF  41
....................             man = 0; 
02B0:  CLRF   31
....................             start_working = 0; 
02B1:  CLRF   2D
....................             n=0; 
02B2:  CLRF   2F
....................             start_wheel(); 
02B3:  CALL   0D9
....................          } 
02B4:  GOTO   1AB
....................           
....................     } 
.................... } 
....................  
02B5:  SLEEP
.................... int infared_input(int& man, int& n, int kill_each,int& point_at, int* people, int16 predict_survivor){ 
....................           
....................          stop_wheel(); 
*
0218:  CALL   0C3
....................          man++; 
0219:  INCF   31,F
....................           
....................          do{ 
....................             point_at++; 
021A:  INCF   41,F
....................             if(point_at == 12) point_at = 0; 
021B:  MOVF   41,W
021C:  SUBLW  0C
021D:  BTFSC  03.2
021E:  CLRF   41
....................          }while(people[point_at] == 0); 
021F:  MOVF   41,W
0220:  ADDWF  44,W
0221:  MOVWF  04
0222:  BCF    03.7
0223:  BTFSC  45.0
0224:  BSF    03.7
0225:  MOVF   00,F
0226:  BTFSC  03.2
0227:  GOTO   21A
....................           
....................          show_on7Sec(point_at+1+predict_survivor); 
0228:  MOVLW  01
0229:  ADDWF  41,W
022A:  ADDWF  46,W
022B:  MOVWF  48
022C:  MOVF   47,W
022D:  MOVWF  49
022E:  BTFSC  03.0
022F:  INCF   49,F
0230:  MOVF   49,W
0231:  MOVWF  4E
0232:  MOVF   48,W
0233:  MOVWF  4D
0234:  CALL   0A8
....................           
....................          if(n <= 1){ 
0235:  MOVF   2F,W
0236:  SUBLW  01
0237:  BTFSS  03.0
0238:  GOTO   23D
....................             //stop working 
....................             start_working = 0; 
0239:  CLRF   2D
....................             return 1; 
023A:  MOVLW  01
023B:  MOVWF  78
023C:  GOTO   284
....................          } 
....................              
....................             if(man < kill_each){ 
023D:  MOVF   43,W
023E:  SUBWF  31,W
023F:  BTFSC  03.0
0240:  GOTO   24A
....................                // continue spinning 
....................               start_wheel(); 
0241:  CALL   0D9
....................               delay_ms(430); 
0242:  MOVLW  02
0243:  MOVWF  48
0244:  MOVLW  D7
0245:  MOVWF  4C
0246:  CALL   084
0247:  DECFSZ 48,F
0248:  GOTO   244
....................                    
....................             }else{ 
0249:  GOTO   282
....................                //reset man 
....................                man = 0; 
024A:  CLRF   31
....................                
....................                //show_on7Sec(n); 
....................                do{ 
....................                   servo_control(); 
....................                   delay_ms(100); 
*
0263:  MOVLW  64
0264:  MOVWF  4C
0265:  CALL   084
....................                }while(read_adc() >= sensor_value+10); 
0266:  BSF    1F.1
0267:  BTFSC  1F.1
0268:  GOTO   267
0269:  MOVF   1E,W
026A:  MOVWF  7A
026B:  BSF    03.5
026C:  MOVF   1E,W
026D:  BCF    03.5
026E:  MOVWF  48
026F:  MOVF   7A,W
0270:  MOVWF  49
0271:  MOVLW  0A
0272:  ADDWF  2C,W
0273:  MOVF   49,F
0274:  BTFSS  03.2
0275:  GOTO   24B
0276:  SUBWF  48,W
0277:  BTFSC  03.0
0278:  GOTO   24B
....................                    
....................                // decreae people 
....................                n--; 
0279:  DECF   2F,F
....................                start_wheel(); 
027A:  CALL   0D9
....................                people[point_at] = 0; 
027B:  MOVF   41,W
027C:  ADDWF  44,W
027D:  MOVWF  04
027E:  BCF    03.7
027F:  BTFSC  45.0
0280:  BSF    03.7
0281:  CLRF   00
....................             } 
....................          return 0; 
0282:  MOVLW  00
0283:  MOVWF  78
.................... } 
....................  
.................... void stop_wheel(){ 
....................  
....................    disable_interrupts(INT_TIMER1); 
*
00C3:  BSF    03.5
00C4:  BCF    0C.0
....................    output_low(MOTORGO); 
00C5:  BCF    06.6
00C6:  BCF    03.5
00C7:  BCF    06.6
....................    output_high(MOTORSTOP); 
00C8:  BSF    03.5
00C9:  BCF    06.5
00CA:  BCF    03.5
00CB:  BSF    06.5
....................    spining_wheel = 0; 
00CC:  CLRF   29
....................    delay_ms(500); 
00CD:  MOVLW  02
00CE:  MOVWF  4B
00CF:  MOVLW  FA
00D0:  MOVWF  4C
00D1:  CALL   084
00D2:  DECFSZ 4B,F
00D3:  GOTO   0CF
....................    output_low(MOTORSTOP); 
00D4:  BSF    03.5
00D5:  BCF    06.5
00D6:  BCF    03.5
00D7:  BCF    06.5
00D8:  RETURN
....................  
.................... } 
....................  
.................... void servo_control(){ 
....................  
....................       //set_timer1(start); 
....................       cervo_work=1; 
*
024B:  MOVLW  01
024C:  MOVWF  28
....................       enable_interrupts(INT_TIMER1); 
024D:  BSF    03.5
024E:  BSF    0C.0
....................       level = 14; 
024F:  MOVLW  0E
0250:  BCF    03.5
0251:  MOVWF  2A
....................       delay_ms(1000); 
0252:  MOVLW  04
0253:  MOVWF  4B
0254:  MOVLW  FA
0255:  MOVWF  4C
0256:  CALL   084
0257:  DECFSZ 4B,F
0258:  GOTO   254
....................       level = 9; 
0259:  MOVLW  09
025A:  MOVWF  2A
....................       delay_ms(1000); 
025B:  MOVLW  04
025C:  MOVWF  4B
025D:  MOVLW  FA
025E:  MOVWF  4C
025F:  CALL   084
0260:  DECFSZ 4B,F
0261:  GOTO   25D
....................       cervo_work = 0; 
0262:  CLRF   28
.................... } 
....................  
.................... int find_survivor(int number){ 
....................  
....................    int msb = 1; 
....................    while((msb << 1) <= number){ 
....................       msb <<= 1; 
....................    } 
....................     
....................    return (number-msb) * 2 + 1; 
....................  
.................... } 
....................  
.................... void start_wheel(){ 
.................... //start wheel 
....................    spining_wheel = 1; 
*
00D9:  MOVLW  01
00DA:  MOVWF  29
....................    motor_level = 40; 
00DB:  MOVLW  28
00DC:  MOVWF  30
....................    enable_interrupts(INT_TIMER1); 
00DD:  BSF    03.5
00DE:  BSF    0C.0
....................    delay_ms(150); 
00DF:  MOVLW  96
00E0:  BCF    03.5
00E1:  MOVWF  4C
00E2:  CALL   084
....................    motor_level = 30; 
00E3:  MOVLW  1E
00E4:  MOVWF  30
....................    enable_interrupts(INT_TIMER1); 
00E5:  BSF    03.5
00E6:  BSF    0C.0
00E7:  BCF    03.5
00E8:  RETURN
....................                          
.................... } 

Configuration Fuses:
   Word  1: 2FC7   RC NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
